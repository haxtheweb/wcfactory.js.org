[
  {
   "id":"Contributing",
   "title":"Contributing",
   "created": "",
   "location":"/content/2_contributing/",
   "description":"If you'd like to contribute to WCFactory, check out our git repo.If you'd like to contribute to the elements that make up this website, check out our monorepo produced and managed by WCFactory.If you'd like to contribute to the Web components.org registry. Click Publish Element on their website.",
   "text":"If you'd like to contribute to WCFactory, check out our git repo.If you'd like to contribute to the elements that make up this website, check out our monorepo produced and managed by WCFactory.If you'd like to contribute to the Web components.org registry. Click Publish Element on their website."
  },
  {
   "id":"Examples",
   "title":"Examples",
   "created": "",
   "location":"/content/examples/",
   "description":"Webcomponents is an example of what's been produced using wcfactory",
   "text":"Webcomponents is an example of what's been produced using wcfactory"
  },
  {
   "id":"Home",
   "title":"Home",
   "created": "",
   "location":"/content/1_home/",
   "description":"Are you sure you want this?It's likely that you probably want our Create CLI. npm init @haxtheweb",
   "text":"Are you sure you want this?It's likely that you probably want our Create CLI. npm init @haxtheweb"
  },
  {
   "id":"New to web components?",
   "title":"New to web components?",
   "created": "",
   "location":"/content/new-to-web-components/",
   "description":"If you are new to web components and front end development in general, you may want to consider using HAX CLI.npm init @haxtheweb",
   "text":"If you are new to web components and front end development in general, you may want to consider using HAX CLI.npm init @haxtheweb"
  },
  {
   "id":"Reusing web components",
   "title":"Reusing web components",
   "created": "",
   "location":"/content/using-existing-web-components/",
   "description":"So you want to leverage all that goodness from web components [dot] org huh? Awesome! There's a minor thing you need to do differently from typical yarn repos you might be used to.Because this is a monorepo and we're optimizing for file space, you need to always do installations from the monorepo (factory) root. Here's the workflow for adding elements from webcomponents.org / other npm reposfind something you like, like @haxtheweb/code-editorgo to the element you want to use this in and add it manually to the package.json (factories/my-factory/elements/my-element/package.json)go to the factory floor / monorepo root (factories/my-factory)run yarn installProfitThis is a little annoying (ehhh what's up doc) for sure but VS Code plugins help ensure that you add things to the package.json of the correct version in the dependencies block. All of our element library implementations have a dependencies and devDependencies block automatically.",
   "text":"So you want to leverage all that goodness from web components [dot] org huh? Awesome! There's a minor thing you need to do differently from typical yarn repos you might be used to.Because this is a monorepo and we're optimizing for file space, you need to always do installations from the monorepo (factory) root. Here's the workflow for adding elements from webcomponents.org / other npm reposfind something you like, like @haxtheweb/code-editorgo to the element you want to use this in and add it manually to the package.json (factories/my-factory/elements/my-element/package.json)go to the factory floor / monorepo root (factories/my-factory)run yarn installProfitThis is a little annoying (ehhh what's up doc) for sure but VS Code plugins help ensure that you add things to the package.json of the correct version in the dependencies block. All of our element library implementations have a dependencies and devDependencies block automatically."
  }
]